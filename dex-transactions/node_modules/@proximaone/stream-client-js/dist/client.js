"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamClient = void 0;
const grpc = __importStar(require("@grpc/grpc-js"));
const ProximaService = __importStar(require("./gen/proto/messages/v1alpha1/messages_grpc_pb"));
const ProximaServiceTypes = __importStar(require("./gen/proto/messages/v1alpha1/messages_pb"));
const rxjs_1 = require("rxjs");
class StreamClient {
    constructor(uri, auth = "") {
        this.authorization = auth;
        const secure = uri.includes(":443");
        const credentials = secure
            ? grpc.credentials.createSsl()
            : grpc.credentials.createInsecure();
        this.client = new ProximaService.MessagesServiceClient(uri, credentials, {});
    }
    streamMessages(streamId, opts = {}) {
        let request = new ProximaServiceTypes.StreamMessagesRequest().setStreamId(streamId);
        if (opts.latest != undefined)
            request = request.setLastMessageId(opts.latest);
        const stream = this.client.streamMessages(request, this.authMeta());
        return toObservable(stream).pipe((0, rxjs_1.mergeMap)((x) => x.toObject().messagesList.flat()));
    }
    async getNextMessages(streamId, opts = {}) {
        var _a;
        let request = new ProximaServiceTypes.GetNextMessagesRequest()
            .setStreamId(streamId)
            .setCount((_a = opts.messageCount) !== null && _a !== void 0 ? _a : 100);
        if (opts.latest != undefined)
            request = request.setLastMessageId(opts.latest);
        return new Promise((resolve, reject) => {
            this.client.getNextMessages(request, this.authMeta(), (err, response) => {
                if (err != null) {
                    console.log(`[execute query] err:\nerr.message: ${err.message}\nerr.stack:\n${err.stack}`);
                    reject(err);
                    return;
                }
                resolve(response.toObject());
            });
        });
    }
    authMeta() {
        const meta = new grpc.Metadata();
        meta.add("authorization", "Bearer " + this.authorization);
        return meta;
    }
}
exports.StreamClient = StreamClient;
function toObservable(grpcStreamResponse) {
    return new rxjs_1.Observable((observer) => {
        grpcStreamResponse.on("data", (d) => observer.next(d));
        grpcStreamResponse.on("error", (err) => observer.error(err));
        grpcStreamResponse.on("end", () => observer.complete());
        grpcStreamResponse.on("close", () => observer.error("connection closed"));
        return () => {
            console.log("cancelling grpc stream");
            grpcStreamResponse.cancel();
        };
    });
}
//# sourceMappingURL=client.js.map